package taoqz.top.行为型模式.观察者模式;

public class Readme {

    /**
     *
     * 观察者模式（行为型模式）：
     *      观察者模式也被称为发布订阅模式，在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知
     *      一般情况下，被依赖的对象叫做被观察者（Observable），依赖的对象叫做观察者（Observer），在开发时这两种对象的称呼是比较的灵活的
     *      比如spring中的 EventEmitter-EventListener 中的机制就是观察者模式（场景符合上方的定义）
     * 设计模式干的事情就是解耦，创建型模式是将创建和使用代码解耦，结构型模式是将不同功能代码解耦，行为型模式是将不同的行为代码解耦，
     * 具体到观察者模式，他是将观察者和被观察者代码解耦合。让一大坨代码拆分成职责更单一的小类，让其满足开闭原则，高内聚低耦合等特性。
     * 以此来控制和应对代码的复杂度，提高代码的可扩展性。
     */


    /**
     * 需求：文件copy，每 20% 发送一次提示消息
     */

}
